plugins {
  id 'groovy'
  id 'application'
  id 'jacoco'
}

group = 'com.webanalyzer'
version = '1.0.0'

repositories {
  mavenCentral()
}

dependencies {
  // Core
  implementation 'org.apache.groovy:groovy-all:4.0.25'
  implementation 'org.apache.groovy:groovy-json:4.0.25'
  implementation 'com.google.guava:guava:33.4.7-jre'

  // CLI
  implementation 'info.picocli:picocli:4.7.5'
  implementation 'info.picocli:picocli-codegen:4.7.5'
  implementation 'commons-cli:commons-cli:1.5.0'

  // Web & HTML
  implementation 'org.jsoup:jsoup:1.17.2'
  implementation 'org.gebish:geb-core:7.0'
  implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.3'

  // WebDriver
  implementation 'org.seleniumhq.selenium:selenium-java:4.31.0'
  implementation 'org.seleniumhq.selenium:selenium-chrome-driver:4.31.0'
  implementation 'org.seleniumhq.selenium:selenium-firefox-driver:4.31.0'
  implementation 'io.github.bonigarcia:webdrivermanager:6.0.1'

  // Logging
  implementation 'org.slf4j:slf4j-api:2.0.17'
  implementation 'ch.qos.logback:logback-classic:1.5.18'

  // Testing
  testImplementation 'org.spockframework:spock-core:2.4-M5-groovy-4.0'

  // JUnit Platform for Test Suite support
  testImplementation 'org.junit.platform:junit-platform-suite-api:1.10.2'
  testImplementation 'org.junit.platform:junit-platform-suite-engine:1.10.2'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.2'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

application {
  mainClass = 'com.webanalyzer.cli.WebPageAnalyzer'
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  // Removed the spock.configuration system property that caused issues

  // Ensure proper encoding for tests
  systemProperty 'file.encoding', 'UTF-8'

  testLogging {
    events = ["passed", "skipped", "failed"]
    exceptionFormat = "full"
    showStandardStreams = true
  }
}

// Configure JaCoCo
jacoco {
  toolVersion = "0.8.11"
}

jacocoTestReport {
  reports {
    xml.required = true
    html.required = true
    html.outputLocation = file("${buildDir}/reports/coverage/html")
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        minimum = 0.8
      }
    }
  }
}

// Custom task to run tests with coverage
tasks.register('testWithCoverage', Test) {
  group = 'Verification'
  description = 'Runs tests with JaCoCo coverage reporting and verification'

  finalizedBy jacocoTestReport, jacocoTestCoverageVerification

  doLast {
    println "Test coverage report generated at: ${buildDir}/reports/coverage/html/index.html"
  }
}

// Task to create sample HTML files for testing
tasks.register('createSampleHtmlFiles', JavaExec) {
  group = 'Testing'
  description = 'Generates sample HTML files for testing'

  classpath = sourceSets.test.runtimeClasspath
  mainClass = 'com.webanalyzer.test.util.SampleHtmlFilesGenerator'
}
